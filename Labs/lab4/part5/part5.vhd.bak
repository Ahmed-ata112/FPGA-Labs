library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity part5 is
  port (
    fast_Clk : in std_logic;
    HEX0, HEX1, HEX2, HEX3, HEX4, HEX5 : out std_logic_vector (7 - 1 downto 0)
  );
end part5;

architecture behavior of part4 is
  signal sw, rot : std_logic_vector(11 downto 0);
  
  signal fast_count : unsigned(31 downto 0) := (others => '0');
--   signal count : unsigned(1 downto 0) := "00";
component decoder is
    port (
      in_decoder : in std_logic_vector(2-1 downto 0);
      out_decoder : out std_logic_vector(7-1 downto 0));
  end component;
--   component part5 is
--     port (
--       SW : in std_logic_vector (10 - 1 downto 0);
--       LEDR : out std_logic_vector (10 - 1 downto 0);
--       HEX0, HEX1, HEX2, HEX3 : out std_logic_vector (7 - 1 downto 0)
--     );
--   end component;
begin
  rot <= "100100111111";
  d0 : decoder port map(sw(11 downto 10), HEX0);
  d1 : decoder port map(sw(9 downto 8), HEX1);
  d2 : decoder port map(sw(7 downto 6), HEX2);
  d3 : decoder port map(sw(5 downto 4), HEX3);
  d4 : decoder port map(sw(3 downto 2), HEX4);
  d5 : decoder port map(sw(1 downto 0), HEX5);
--   p5 : part5 port map(
--     SW => sw,
--     HEX0 => HEX0,
--     HEX1 => HEX1,
--     HEX2 => HEX2,
--     HEX3 => HEX3
--   );
  process (fast_clk) is
  begin
  if fast_Clk'event and fast_Clk = '1' then
    if fast_count = 50 then
    --   count <= count + 1;
      rot(11 downto 0) <= rot(1 downto 0) & rot(11 downto 2);
      fast_count <= (others => '0');

      else
      fast_count <= fast_count + 1;
    end if;

  end if;
end process;
sw <= rot;
end behavior;